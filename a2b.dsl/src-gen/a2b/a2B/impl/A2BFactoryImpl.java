/**
 * generated by Xtext 2.17.0
 */
package a2b.a2B.impl;

import a2b.a2B.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class A2BFactoryImpl extends EFactoryImpl implements A2BFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static A2BFactory init()
  {
    try
    {
      A2BFactory theA2BFactory = (A2BFactory)EPackage.Registry.INSTANCE.getEFactory(A2BPackage.eNS_URI);
      if (theA2BFactory != null)
      {
        return theA2BFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new A2BFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public A2BFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case A2BPackage.MODEL: return createModel();
      case A2BPackage.INSTRUCTION: return createInstruction();
      case A2BPackage.DB: return createDB();
      case A2BPackage.DW: return createDW();
      case A2BPackage.DD: return createDD();
      case A2BPackage.STR: return createSTR();
      case A2BPackage.BASE64_DECODE: return createBase64Decode();
      case A2BPackage.BASE64_ENCODE: return createBase64Encode();
      case A2BPackage.PAD: return createPAD();
      case A2BPackage.INCLUDE: return createINCLUDE();
      case A2BPackage.MAC: return createMAC();
      case A2BPackage.IP: return createIP();
      case A2BPackage.PXL: return createPXL();
      case A2BPackage.HXS: return createHXS();
      case A2BPackage.CRC16: return createCRC16();
      case A2BPackage.CRC32: return createCRC32();
      case A2BPackage.BE: return createBE();
      case A2BPackage.LE: return createLE();
      case A2BPackage.PCAP: return createPCAP();
      case A2BPackage.NL: return createNL();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Model createModel()
  {
    ModelImpl model = new ModelImpl();
    return model;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Instruction createInstruction()
  {
    InstructionImpl instruction = new InstructionImpl();
    return instruction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DB createDB()
  {
    DBImpl db = new DBImpl();
    return db;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DW createDW()
  {
    DWImpl dw = new DWImpl();
    return dw;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DD createDD()
  {
    DDImpl dd = new DDImpl();
    return dd;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public STR createSTR()
  {
    STRImpl str = new STRImpl();
    return str;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Base64Decode createBase64Decode()
  {
    Base64DecodeImpl base64Decode = new Base64DecodeImpl();
    return base64Decode;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Base64Encode createBase64Encode()
  {
    Base64EncodeImpl base64Encode = new Base64EncodeImpl();
    return base64Encode;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PAD createPAD()
  {
    PADImpl pad = new PADImpl();
    return pad;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public INCLUDE createINCLUDE()
  {
    INCLUDEImpl include = new INCLUDEImpl();
    return include;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MAC createMAC()
  {
    MACImpl mac = new MACImpl();
    return mac;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IP createIP()
  {
    IPImpl ip = new IPImpl();
    return ip;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PXL createPXL()
  {
    PXLImpl pxl = new PXLImpl();
    return pxl;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public HXS createHXS()
  {
    HXSImpl hxs = new HXSImpl();
    return hxs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CRC16 createCRC16()
  {
    CRC16Impl crc16 = new CRC16Impl();
    return crc16;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CRC32 createCRC32()
  {
    CRC32Impl crc32 = new CRC32Impl();
    return crc32;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BE createBE()
  {
    BEImpl be = new BEImpl();
    return be;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LE createLE()
  {
    LEImpl le = new LEImpl();
    return le;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PCAP createPCAP()
  {
    PCAPImpl pcap = new PCAPImpl();
    return pcap;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NL createNL()
  {
    NLImpl nl = new NLImpl();
    return nl;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public A2BPackage getA2BPackage()
  {
    return (A2BPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static A2BPackage getPackage()
  {
    return A2BPackage.eINSTANCE;
  }

} //A2BFactoryImpl
