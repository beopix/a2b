/**
 * generated by Xtext 2.17.0
 */
package a2b.a2B.util;

import a2b.a2B.*;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see a2b.a2B.A2BPackage
 * @generated
 */
public class A2BAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static A2BPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public A2BAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = A2BPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected A2BSwitch<Adapter> modelSwitch =
    new A2BSwitch<Adapter>()
    {
      @Override
      public Adapter caseModel(Model object)
      {
        return createModelAdapter();
      }
      @Override
      public Adapter caseInstruction(Instruction object)
      {
        return createInstructionAdapter();
      }
      @Override
      public Adapter caseDB(DB object)
      {
        return createDBAdapter();
      }
      @Override
      public Adapter caseDW(DW object)
      {
        return createDWAdapter();
      }
      @Override
      public Adapter caseDD(DD object)
      {
        return createDDAdapter();
      }
      @Override
      public Adapter caseSTR(STR object)
      {
        return createSTRAdapter();
      }
      @Override
      public Adapter caseBase64Decode(Base64Decode object)
      {
        return createBase64DecodeAdapter();
      }
      @Override
      public Adapter caseBase64Encode(Base64Encode object)
      {
        return createBase64EncodeAdapter();
      }
      @Override
      public Adapter casePAD(PAD object)
      {
        return createPADAdapter();
      }
      @Override
      public Adapter caseINCLUDE(INCLUDE object)
      {
        return createINCLUDEAdapter();
      }
      @Override
      public Adapter caseMAC(MAC object)
      {
        return createMACAdapter();
      }
      @Override
      public Adapter caseIP(IP object)
      {
        return createIPAdapter();
      }
      @Override
      public Adapter casePXL(PXL object)
      {
        return createPXLAdapter();
      }
      @Override
      public Adapter caseHXS(HXS object)
      {
        return createHXSAdapter();
      }
      @Override
      public Adapter caseCRC16(CRC16 object)
      {
        return createCRC16Adapter();
      }
      @Override
      public Adapter caseCRC32(CRC32 object)
      {
        return createCRC32Adapter();
      }
      @Override
      public Adapter caseBE(BE object)
      {
        return createBEAdapter();
      }
      @Override
      public Adapter caseLE(LE object)
      {
        return createLEAdapter();
      }
      @Override
      public Adapter casePCAP(PCAP object)
      {
        return createPCAPAdapter();
      }
      @Override
      public Adapter caseNL(NL object)
      {
        return createNLAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link a2b.a2B.Model <em>Model</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see a2b.a2B.Model
   * @generated
   */
  public Adapter createModelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link a2b.a2B.Instruction <em>Instruction</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see a2b.a2B.Instruction
   * @generated
   */
  public Adapter createInstructionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link a2b.a2B.DB <em>DB</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see a2b.a2B.DB
   * @generated
   */
  public Adapter createDBAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link a2b.a2B.DW <em>DW</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see a2b.a2B.DW
   * @generated
   */
  public Adapter createDWAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link a2b.a2B.DD <em>DD</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see a2b.a2B.DD
   * @generated
   */
  public Adapter createDDAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link a2b.a2B.STR <em>STR</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see a2b.a2B.STR
   * @generated
   */
  public Adapter createSTRAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link a2b.a2B.Base64Decode <em>Base64 Decode</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see a2b.a2B.Base64Decode
   * @generated
   */
  public Adapter createBase64DecodeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link a2b.a2B.Base64Encode <em>Base64 Encode</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see a2b.a2B.Base64Encode
   * @generated
   */
  public Adapter createBase64EncodeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link a2b.a2B.PAD <em>PAD</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see a2b.a2B.PAD
   * @generated
   */
  public Adapter createPADAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link a2b.a2B.INCLUDE <em>INCLUDE</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see a2b.a2B.INCLUDE
   * @generated
   */
  public Adapter createINCLUDEAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link a2b.a2B.MAC <em>MAC</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see a2b.a2B.MAC
   * @generated
   */
  public Adapter createMACAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link a2b.a2B.IP <em>IP</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see a2b.a2B.IP
   * @generated
   */
  public Adapter createIPAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link a2b.a2B.PXL <em>PXL</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see a2b.a2B.PXL
   * @generated
   */
  public Adapter createPXLAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link a2b.a2B.HXS <em>HXS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see a2b.a2B.HXS
   * @generated
   */
  public Adapter createHXSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link a2b.a2B.CRC16 <em>CRC16</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see a2b.a2B.CRC16
   * @generated
   */
  public Adapter createCRC16Adapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link a2b.a2B.CRC32 <em>CRC32</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see a2b.a2B.CRC32
   * @generated
   */
  public Adapter createCRC32Adapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link a2b.a2B.BE <em>BE</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see a2b.a2B.BE
   * @generated
   */
  public Adapter createBEAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link a2b.a2B.LE <em>LE</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see a2b.a2B.LE
   * @generated
   */
  public Adapter createLEAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link a2b.a2B.PCAP <em>PCAP</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see a2b.a2B.PCAP
   * @generated
   */
  public Adapter createPCAPAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link a2b.a2B.NL <em>NL</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see a2b.a2B.NL
   * @generated
   */
  public Adapter createNLAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //A2BAdapterFactory
