/*
 * generated by Xtext 2.17.0
 */
package a2b.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class A2BGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "a2b.A2B.Model");
		private final Assignment cElementAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cElementInstructionParserRuleCall_0 = (RuleCall)cElementAssignment.eContents().get(0);
		
		//Model:
		//	element+=Instruction*;
		@Override public ParserRule getRule() { return rule; }
		
		//element+=Instruction*
		public Assignment getElementAssignment() { return cElementAssignment; }
		
		//Instruction
		public RuleCall getElementInstructionParserRuleCall_0() { return cElementInstructionParserRuleCall_0; }
	}
	public class InstructionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "a2b.A2B.Instruction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDBParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDWParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDDParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cSTRParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cBase64ParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cORGParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cINCLUDEParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cMACParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cIPParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cHXSParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final Group cGroup_10 = (Group)cAlternatives.eContents().get(10);
		private final Action cBEAction_10_0 = (Action)cGroup_10.eContents().get(0);
		private final RuleCall cBEParserRuleCall_10_1 = (RuleCall)cGroup_10.eContents().get(1);
		private final Group cGroup_11 = (Group)cAlternatives.eContents().get(11);
		private final Action cLEAction_11_0 = (Action)cGroup_11.eContents().get(0);
		private final RuleCall cLEParserRuleCall_11_1 = (RuleCall)cGroup_11.eContents().get(1);
		private final Group cGroup_12 = (Group)cAlternatives.eContents().get(12);
		private final Action cPCAPAction_12_0 = (Action)cGroup_12.eContents().get(0);
		private final RuleCall cPCAPParserRuleCall_12_1 = (RuleCall)cGroup_12.eContents().get(1);
		private final Group cGroup_13 = (Group)cAlternatives.eContents().get(13);
		private final Action cCRCAction_13_0 = (Action)cGroup_13.eContents().get(0);
		private final RuleCall cCRCParserRuleCall_13_1 = (RuleCall)cGroup_13.eContents().get(1);
		
		//Instruction:
		//	DB | DW | DD | STR | Base64 | ORG | INCLUDE | MAC | IP | HXS | {BE} BE | {LE} LE | {PCAP} PCAP | {CRC} CRC;
		@Override public ParserRule getRule() { return rule; }
		
		//DB | DW | DD | STR | Base64 | ORG | INCLUDE | MAC | IP | HXS | {BE} BE | {LE} LE | {PCAP} PCAP | {CRC} CRC
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DB
		public RuleCall getDBParserRuleCall_0() { return cDBParserRuleCall_0; }
		
		//DW
		public RuleCall getDWParserRuleCall_1() { return cDWParserRuleCall_1; }
		
		//DD
		public RuleCall getDDParserRuleCall_2() { return cDDParserRuleCall_2; }
		
		//STR
		public RuleCall getSTRParserRuleCall_3() { return cSTRParserRuleCall_3; }
		
		//Base64
		public RuleCall getBase64ParserRuleCall_4() { return cBase64ParserRuleCall_4; }
		
		//ORG
		public RuleCall getORGParserRuleCall_5() { return cORGParserRuleCall_5; }
		
		//INCLUDE
		public RuleCall getINCLUDEParserRuleCall_6() { return cINCLUDEParserRuleCall_6; }
		
		//MAC
		public RuleCall getMACParserRuleCall_7() { return cMACParserRuleCall_7; }
		
		//IP
		public RuleCall getIPParserRuleCall_8() { return cIPParserRuleCall_8; }
		
		//HXS
		public RuleCall getHXSParserRuleCall_9() { return cHXSParserRuleCall_9; }
		
		//{BE} BE
		public Group getGroup_10() { return cGroup_10; }
		
		//{BE}
		public Action getBEAction_10_0() { return cBEAction_10_0; }
		
		//BE
		public RuleCall getBEParserRuleCall_10_1() { return cBEParserRuleCall_10_1; }
		
		//{LE} LE
		public Group getGroup_11() { return cGroup_11; }
		
		//{LE}
		public Action getLEAction_11_0() { return cLEAction_11_0; }
		
		//LE
		public RuleCall getLEParserRuleCall_11_1() { return cLEParserRuleCall_11_1; }
		
		//{PCAP} PCAP
		public Group getGroup_12() { return cGroup_12; }
		
		//{PCAP}
		public Action getPCAPAction_12_0() { return cPCAPAction_12_0; }
		
		//PCAP
		public RuleCall getPCAPParserRuleCall_12_1() { return cPCAPParserRuleCall_12_1; }
		
		//{CRC} CRC
		public Group getGroup_13() { return cGroup_13; }
		
		//{CRC}
		public Action getCRCAction_13_0() { return cCRCAction_13_0; }
		
		//CRC
		public RuleCall getCRCParserRuleCall_13_1() { return cCRCParserRuleCall_13_1; }
	}
	public class DBElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "a2b.A2B.DB");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDBKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cStringValueAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cStringValueBYTETerminalRuleCall_1_0_0 = (RuleCall)cStringValueAssignment_1_0.eContents().get(0);
		private final Assignment cIntValueAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cIntValueINTTerminalRuleCall_1_1_0 = (RuleCall)cIntValueAssignment_1_1.eContents().get(0);
		private final Assignment cCrcValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCrcValueCRCCHECKTerminalRuleCall_2_0 = (RuleCall)cCrcValueAssignment_2.eContents().get(0);
		
		//DB:
		//	'DB' (stringValue=BYTE | intValue=INT) crcValue=CRCCHECK?;
		@Override public ParserRule getRule() { return rule; }
		
		//'DB' (stringValue=BYTE | intValue=INT) crcValue=CRCCHECK?
		public Group getGroup() { return cGroup; }
		
		//'DB'
		public Keyword getDBKeyword_0() { return cDBKeyword_0; }
		
		//stringValue=BYTE | intValue=INT
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//stringValue=BYTE
		public Assignment getStringValueAssignment_1_0() { return cStringValueAssignment_1_0; }
		
		//BYTE
		public RuleCall getStringValueBYTETerminalRuleCall_1_0_0() { return cStringValueBYTETerminalRuleCall_1_0_0; }
		
		//intValue=INT
		public Assignment getIntValueAssignment_1_1() { return cIntValueAssignment_1_1; }
		
		//INT
		public RuleCall getIntValueINTTerminalRuleCall_1_1_0() { return cIntValueINTTerminalRuleCall_1_1_0; }
		
		//crcValue=CRCCHECK?
		public Assignment getCrcValueAssignment_2() { return cCrcValueAssignment_2; }
		
		//CRCCHECK
		public RuleCall getCrcValueCRCCHECKTerminalRuleCall_2_0() { return cCrcValueCRCCHECKTerminalRuleCall_2_0; }
	}
	public class DWElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "a2b.A2B.DW");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDWKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cStringValueAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cStringValueWORDTerminalRuleCall_1_0_0 = (RuleCall)cStringValueAssignment_1_0.eContents().get(0);
		private final Assignment cIntValueAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cIntValueINTTerminalRuleCall_1_1_0 = (RuleCall)cIntValueAssignment_1_1.eContents().get(0);
		private final Assignment cCrcValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCrcValueCRCCHECKTerminalRuleCall_2_0 = (RuleCall)cCrcValueAssignment_2.eContents().get(0);
		
		//DW:
		//	'DW' (stringValue=WORD | intValue=INT) crcValue=CRCCHECK?;
		@Override public ParserRule getRule() { return rule; }
		
		//'DW' (stringValue=WORD | intValue=INT) crcValue=CRCCHECK?
		public Group getGroup() { return cGroup; }
		
		//'DW'
		public Keyword getDWKeyword_0() { return cDWKeyword_0; }
		
		//stringValue=WORD | intValue=INT
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//stringValue=WORD
		public Assignment getStringValueAssignment_1_0() { return cStringValueAssignment_1_0; }
		
		//WORD
		public RuleCall getStringValueWORDTerminalRuleCall_1_0_0() { return cStringValueWORDTerminalRuleCall_1_0_0; }
		
		//intValue=INT
		public Assignment getIntValueAssignment_1_1() { return cIntValueAssignment_1_1; }
		
		//INT
		public RuleCall getIntValueINTTerminalRuleCall_1_1_0() { return cIntValueINTTerminalRuleCall_1_1_0; }
		
		//crcValue=CRCCHECK?
		public Assignment getCrcValueAssignment_2() { return cCrcValueAssignment_2; }
		
		//CRCCHECK
		public RuleCall getCrcValueCRCCHECKTerminalRuleCall_2_0() { return cCrcValueCRCCHECKTerminalRuleCall_2_0; }
	}
	public class DDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "a2b.A2B.DD");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDDKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cStringValueAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cStringValueDOUBLEWORDTerminalRuleCall_1_0_0 = (RuleCall)cStringValueAssignment_1_0.eContents().get(0);
		private final Assignment cLongValueAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cLongValueLONGParserRuleCall_1_1_0 = (RuleCall)cLongValueAssignment_1_1.eContents().get(0);
		private final Assignment cCrcValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCrcValueCRCCHECKTerminalRuleCall_2_0 = (RuleCall)cCrcValueAssignment_2.eContents().get(0);
		
		//DD:
		//	'DD' (stringValue=DOUBLEWORD | longValue=LONG) crcValue=CRCCHECK?;
		@Override public ParserRule getRule() { return rule; }
		
		//'DD' (stringValue=DOUBLEWORD | longValue=LONG) crcValue=CRCCHECK?
		public Group getGroup() { return cGroup; }
		
		//'DD'
		public Keyword getDDKeyword_0() { return cDDKeyword_0; }
		
		//stringValue=DOUBLEWORD | longValue=LONG
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//stringValue=DOUBLEWORD
		public Assignment getStringValueAssignment_1_0() { return cStringValueAssignment_1_0; }
		
		//DOUBLEWORD
		public RuleCall getStringValueDOUBLEWORDTerminalRuleCall_1_0_0() { return cStringValueDOUBLEWORDTerminalRuleCall_1_0_0; }
		
		//longValue=LONG
		public Assignment getLongValueAssignment_1_1() { return cLongValueAssignment_1_1; }
		
		//LONG
		public RuleCall getLongValueLONGParserRuleCall_1_1_0() { return cLongValueLONGParserRuleCall_1_1_0; }
		
		//crcValue=CRCCHECK?
		public Assignment getCrcValueAssignment_2() { return cCrcValueAssignment_2; }
		
		//CRCCHECK
		public RuleCall getCrcValueCRCCHECKTerminalRuleCall_2_0() { return cCrcValueCRCCHECKTerminalRuleCall_2_0; }
	}
	public class STRElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "a2b.A2B.STR");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSTRKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//STR:
		//	'STR' value=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'STR' value=STRING
		public Group getGroup() { return cGroup; }
		
		//'STR'
		public Keyword getSTRKeyword_0() { return cSTRKeyword_0; }
		
		//value=STRING
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_0() { return cValueSTRINGTerminalRuleCall_1_0; }
	}
	public class Base64Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "a2b.A2B.Base64");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cB64Keyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//Base64:
		//	'B64' value=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'B64' value=STRING
		public Group getGroup() { return cGroup; }
		
		//'B64'
		public Keyword getB64Keyword_0() { return cB64Keyword_0; }
		
		//value=STRING
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_0() { return cValueSTRINGTerminalRuleCall_1_0; }
	}
	public class ORGElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "a2b.A2B.ORG");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cORGKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		private final Assignment cCrcValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCrcValueCRCCHECKTerminalRuleCall_2_0 = (RuleCall)cCrcValueAssignment_2.eContents().get(0);
		
		//ORG:
		//	'ORG' value=INT crcValue=CRCCHECK?;
		@Override public ParserRule getRule() { return rule; }
		
		//'ORG' value=INT crcValue=CRCCHECK?
		public Group getGroup() { return cGroup; }
		
		//'ORG'
		public Keyword getORGKeyword_0() { return cORGKeyword_0; }
		
		//value=INT
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_1_0() { return cValueINTTerminalRuleCall_1_0; }
		
		//crcValue=CRCCHECK?
		public Assignment getCrcValueAssignment_2() { return cCrcValueAssignment_2; }
		
		//CRCCHECK
		public RuleCall getCrcValueCRCCHECKTerminalRuleCall_2_0() { return cCrcValueCRCCHECKTerminalRuleCall_2_0; }
	}
	public class INCLUDEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "a2b.A2B.INCLUDE");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cINCLUDEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValuePATHTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//INCLUDE:
		//	'INCLUDE' value=PATH;
		@Override public ParserRule getRule() { return rule; }
		
		//'INCLUDE' value=PATH
		public Group getGroup() { return cGroup; }
		
		//'INCLUDE'
		public Keyword getINCLUDEKeyword_0() { return cINCLUDEKeyword_0; }
		
		//value=PATH
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//PATH
		public RuleCall getValuePATHTerminalRuleCall_1_0() { return cValuePATHTerminalRuleCall_1_0; }
	}
	public class MACElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "a2b.A2B.MAC");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMACKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueMACADDRESSTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		private final Assignment cCrcValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCrcValueCRCCHECKTerminalRuleCall_2_0 = (RuleCall)cCrcValueAssignment_2.eContents().get(0);
		
		//MAC:
		//	'MAC' value=MACADDRESS crcValue=CRCCHECK?;
		@Override public ParserRule getRule() { return rule; }
		
		//'MAC' value=MACADDRESS crcValue=CRCCHECK?
		public Group getGroup() { return cGroup; }
		
		//'MAC'
		public Keyword getMACKeyword_0() { return cMACKeyword_0; }
		
		//value=MACADDRESS
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//MACADDRESS
		public RuleCall getValueMACADDRESSTerminalRuleCall_1_0() { return cValueMACADDRESSTerminalRuleCall_1_0; }
		
		//crcValue=CRCCHECK?
		public Assignment getCrcValueAssignment_2() { return cCrcValueAssignment_2; }
		
		//CRCCHECK
		public RuleCall getCrcValueCRCCHECKTerminalRuleCall_2_0() { return cCrcValueCRCCHECKTerminalRuleCall_2_0; }
	}
	public class IPElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "a2b.A2B.IP");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIPKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueIPADDRESSTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		private final Assignment cCrcValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCrcValueCRCCHECKTerminalRuleCall_2_0 = (RuleCall)cCrcValueAssignment_2.eContents().get(0);
		
		//IP:
		//	'IP' value=IPADDRESS crcValue=CRCCHECK?;
		@Override public ParserRule getRule() { return rule; }
		
		//'IP' value=IPADDRESS crcValue=CRCCHECK?
		public Group getGroup() { return cGroup; }
		
		//'IP'
		public Keyword getIPKeyword_0() { return cIPKeyword_0; }
		
		//value=IPADDRESS
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//IPADDRESS
		public RuleCall getValueIPADDRESSTerminalRuleCall_1_0() { return cValueIPADDRESSTerminalRuleCall_1_0; }
		
		//crcValue=CRCCHECK?
		public Assignment getCrcValueAssignment_2() { return cCrcValueAssignment_2; }
		
		//CRCCHECK
		public RuleCall getCrcValueCRCCHECKTerminalRuleCall_2_0() { return cCrcValueCRCCHECKTerminalRuleCall_2_0; }
	}
	public class HXSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "a2b.A2B.HXS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHXSKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueHEXSTRINGTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		private final Assignment cCrcValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCrcValueCRCCHECKTerminalRuleCall_2_0 = (RuleCall)cCrcValueAssignment_2.eContents().get(0);
		
		//HXS:
		//	'HXS' value=HEXSTRING crcValue=CRCCHECK?;
		@Override public ParserRule getRule() { return rule; }
		
		//'HXS' value=HEXSTRING crcValue=CRCCHECK?
		public Group getGroup() { return cGroup; }
		
		//'HXS'
		public Keyword getHXSKeyword_0() { return cHXSKeyword_0; }
		
		//value=HEXSTRING
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//HEXSTRING
		public RuleCall getValueHEXSTRINGTerminalRuleCall_1_0() { return cValueHEXSTRINGTerminalRuleCall_1_0; }
		
		//crcValue=CRCCHECK?
		public Assignment getCrcValueAssignment_2() { return cCrcValueAssignment_2; }
		
		//CRCCHECK
		public RuleCall getCrcValueCRCCHECKTerminalRuleCall_2_0() { return cCrcValueCRCCHECKTerminalRuleCall_2_0; }
	}
	public class BEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "a2b.A2B.BE");
		private final Keyword cBEKeyword = (Keyword)rule.eContents().get(1);
		
		//BE:
		//	'BE';
		@Override public ParserRule getRule() { return rule; }
		
		//'BE'
		public Keyword getBEKeyword() { return cBEKeyword; }
	}
	public class LEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "a2b.A2B.LE");
		private final Keyword cLEKeyword = (Keyword)rule.eContents().get(1);
		
		//LE:
		//	'LE';
		@Override public ParserRule getRule() { return rule; }
		
		//'LE'
		public Keyword getLEKeyword() { return cLEKeyword; }
	}
	public class PCAPElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "a2b.A2B.PCAP");
		private final Keyword cPCAPKeyword = (Keyword)rule.eContents().get(1);
		
		//PCAP:
		//	'PCAP';
		@Override public ParserRule getRule() { return rule; }
		
		//'PCAP'
		public Keyword getPCAPKeyword() { return cPCAPKeyword; }
	}
	public class CRCElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "a2b.A2B.CRC");
		private final Keyword cCRCKeyword = (Keyword)rule.eContents().get(1);
		
		//CRC:
		//	'CRC';
		@Override public ParserRule getRule() { return rule; }
		
		//'CRC'
		public Keyword getCRCKeyword() { return cCRCKeyword; }
	}
	public class LONGElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "a2b.A2B.LONG");
		private final RuleCall cINTTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//LONG ecore::ELong:
		//	INT;
		@Override public ParserRule getRule() { return rule; }
		
		//INT
		public RuleCall getINTTerminalRuleCall() { return cINTTerminalRuleCall; }
	}
	
	
	private final ModelElements pModel;
	private final InstructionElements pInstruction;
	private final DBElements pDB;
	private final DWElements pDW;
	private final DDElements pDD;
	private final STRElements pSTR;
	private final Base64Elements pBase64;
	private final ORGElements pORG;
	private final INCLUDEElements pINCLUDE;
	private final MACElements pMAC;
	private final IPElements pIP;
	private final HXSElements pHXS;
	private final BEElements pBE;
	private final LEElements pLE;
	private final PCAPElements pPCAP;
	private final CRCElements pCRC;
	private final LONGElements pLONG;
	private final TerminalRule tDECIMALBYTE_;
	private final TerminalRule tBINARY_;
	private final TerminalRule tHEX_;
	private final TerminalRule tBYTE;
	private final TerminalRule tWORD;
	private final TerminalRule tDOUBLEWORD;
	private final TerminalRule tCRCCHECK;
	private final TerminalRule tPATH;
	private final TerminalRule tMACADDRESS;
	private final TerminalRule tIPADDRESS;
	private final TerminalRule tHEXSTRING;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public A2BGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pInstruction = new InstructionElements();
		this.pDB = new DBElements();
		this.pDW = new DWElements();
		this.pDD = new DDElements();
		this.pSTR = new STRElements();
		this.pBase64 = new Base64Elements();
		this.pORG = new ORGElements();
		this.pINCLUDE = new INCLUDEElements();
		this.pMAC = new MACElements();
		this.pIP = new IPElements();
		this.pHXS = new HXSElements();
		this.pBE = new BEElements();
		this.pLE = new LEElements();
		this.pPCAP = new PCAPElements();
		this.pCRC = new CRCElements();
		this.pLONG = new LONGElements();
		this.tDECIMALBYTE_ = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "a2b.A2B.DECIMALBYTE_");
		this.tBINARY_ = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "a2b.A2B.BINARY_");
		this.tHEX_ = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "a2b.A2B.HEX_");
		this.tBYTE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "a2b.A2B.BYTE");
		this.tWORD = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "a2b.A2B.WORD");
		this.tDOUBLEWORD = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "a2b.A2B.DOUBLEWORD");
		this.tCRCCHECK = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "a2b.A2B.CRCCHECK");
		this.tPATH = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "a2b.A2B.PATH");
		this.tMACADDRESS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "a2b.A2B.MACADDRESS");
		this.tIPADDRESS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "a2b.A2B.IPADDRESS");
		this.tHEXSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "a2b.A2B.HEXSTRING");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("a2b.A2B".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	element+=Instruction*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Instruction:
	//	DB | DW | DD | STR | Base64 | ORG | INCLUDE | MAC | IP | HXS | {BE} BE | {LE} LE | {PCAP} PCAP | {CRC} CRC;
	public InstructionElements getInstructionAccess() {
		return pInstruction;
	}
	
	public ParserRule getInstructionRule() {
		return getInstructionAccess().getRule();
	}
	
	//DB:
	//	'DB' (stringValue=BYTE | intValue=INT) crcValue=CRCCHECK?;
	public DBElements getDBAccess() {
		return pDB;
	}
	
	public ParserRule getDBRule() {
		return getDBAccess().getRule();
	}
	
	//DW:
	//	'DW' (stringValue=WORD | intValue=INT) crcValue=CRCCHECK?;
	public DWElements getDWAccess() {
		return pDW;
	}
	
	public ParserRule getDWRule() {
		return getDWAccess().getRule();
	}
	
	//DD:
	//	'DD' (stringValue=DOUBLEWORD | longValue=LONG) crcValue=CRCCHECK?;
	public DDElements getDDAccess() {
		return pDD;
	}
	
	public ParserRule getDDRule() {
		return getDDAccess().getRule();
	}
	
	//STR:
	//	'STR' value=STRING;
	public STRElements getSTRAccess() {
		return pSTR;
	}
	
	public ParserRule getSTRRule() {
		return getSTRAccess().getRule();
	}
	
	//Base64:
	//	'B64' value=STRING;
	public Base64Elements getBase64Access() {
		return pBase64;
	}
	
	public ParserRule getBase64Rule() {
		return getBase64Access().getRule();
	}
	
	//ORG:
	//	'ORG' value=INT crcValue=CRCCHECK?;
	public ORGElements getORGAccess() {
		return pORG;
	}
	
	public ParserRule getORGRule() {
		return getORGAccess().getRule();
	}
	
	//INCLUDE:
	//	'INCLUDE' value=PATH;
	public INCLUDEElements getINCLUDEAccess() {
		return pINCLUDE;
	}
	
	public ParserRule getINCLUDERule() {
		return getINCLUDEAccess().getRule();
	}
	
	//MAC:
	//	'MAC' value=MACADDRESS crcValue=CRCCHECK?;
	public MACElements getMACAccess() {
		return pMAC;
	}
	
	public ParserRule getMACRule() {
		return getMACAccess().getRule();
	}
	
	//IP:
	//	'IP' value=IPADDRESS crcValue=CRCCHECK?;
	public IPElements getIPAccess() {
		return pIP;
	}
	
	public ParserRule getIPRule() {
		return getIPAccess().getRule();
	}
	
	//HXS:
	//	'HXS' value=HEXSTRING crcValue=CRCCHECK?;
	public HXSElements getHXSAccess() {
		return pHXS;
	}
	
	public ParserRule getHXSRule() {
		return getHXSAccess().getRule();
	}
	
	//BE:
	//	'BE';
	public BEElements getBEAccess() {
		return pBE;
	}
	
	public ParserRule getBERule() {
		return getBEAccess().getRule();
	}
	
	//LE:
	//	'LE';
	public LEElements getLEAccess() {
		return pLE;
	}
	
	public ParserRule getLERule() {
		return getLEAccess().getRule();
	}
	
	//PCAP:
	//	'PCAP';
	public PCAPElements getPCAPAccess() {
		return pPCAP;
	}
	
	public ParserRule getPCAPRule() {
		return getPCAPAccess().getRule();
	}
	
	//CRC:
	//	'CRC';
	public CRCElements getCRCAccess() {
		return pCRC;
	}
	
	public ParserRule getCRCRule() {
		return getCRCAccess().getRule();
	}
	
	//LONG ecore::ELong:
	//	INT;
	public LONGElements getLONGAccess() {
		return pLONG;
	}
	
	public ParserRule getLONGRule() {
		return getLONGAccess().getRule();
	}
	
	//terminal DECIMALBYTE_:
	//	'1'..'9'? '0'..'9' | '1' '0'..'9' '0'..'9' | '2' '0'..'4' '0'..'9' | '2' '5' '0'..'5';
	public TerminalRule getDECIMALBYTE_Rule() {
		return tDECIMALBYTE_;
	}
	
	//terminal BINARY_:
	//	('0' | '1') ('0' | '1') ('0' | '1') ('0' | '1') ('0' | '1') ('0' | '1') ('0' | '1') ('0' | '1');
	public TerminalRule getBINARY_Rule() {
		return tBINARY_;
	}
	
	//terminal HEX_:
	//	('A'..'F' | 'a'..'f' | '0'..'9') ('A'..'F' | 'a'..'f' | '0'..'9');
	public TerminalRule getHEX_Rule() {
		return tHEX_;
	}
	
	//terminal BYTE:
	//	'0b' BINARY_ |
	//	'0x' HEX_;
	public TerminalRule getBYTERule() {
		return tBYTE;
	}
	
	//terminal WORD:
	//	'0b' BINARY_ BINARY_ |
	//	'0x' HEX_ HEX_;
	public TerminalRule getWORDRule() {
		return tWORD;
	}
	
	//terminal DOUBLEWORD:
	//	'0b' BINARY_ BINARY_ BINARY_ BINARY_ |
	//	'0x' HEX_ HEX_ HEX_ HEX_;
	public TerminalRule getDOUBLEWORDRule() {
		return tDOUBLEWORD;
	}
	
	//terminal CRCCHECK:
	//	'#';
	public TerminalRule getCRCCHECKRule() {
		return tCRCCHECK;
	}
	
	//terminal PATH:
	//	('A'..'Z' ':')? ('/' ('a'..'z' | 'A'..'Z')*)+ ('.' ('a'..'z' | 'A'..'Z')*)+;
	public TerminalRule getPATHRule() {
		return tPATH;
	}
	
	//terminal MACADDRESS:
	//	HEX_ ':' HEX_ ':' HEX_ ':' HEX_ ':' HEX_ ':' HEX_;
	public TerminalRule getMACADDRESSRule() {
		return tMACADDRESS;
	}
	
	//terminal IPADDRESS:
	//	DECIMALBYTE_ '.' DECIMALBYTE_ '.' DECIMALBYTE_ '.' DECIMALBYTE_;
	public TerminalRule getIPADDRESSRule() {
		return tIPADDRESS;
	}
	
	//terminal HEXSTRING:
	//	'0h' HEX_+;
	public TerminalRule getHEXSTRINGRule() {
		return tHEXSTRING;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
