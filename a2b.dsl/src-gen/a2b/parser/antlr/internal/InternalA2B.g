/*
 * generated by Xtext 2.17.0
 */
grammar InternalA2B;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package a2b.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package a2b.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import a2b.services.A2BGrammarAccess;

}

@parser::members {

 	private A2BGrammarAccess grammarAccess;

    public InternalA2BParser(TokenStream input, A2BGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected A2BGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getModelAccess().getElementInstructionParserRuleCall_0());
			}
			lv_element_0_0=ruleInstruction
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getModelRule());
				}
				add(
					$current,
					"element",
					lv_element_0_0,
					"a2b.A2B.Instruction");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleInstruction
entryRuleInstruction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInstructionRule()); }
	iv_ruleInstruction=ruleInstruction
	{ $current=$iv_ruleInstruction.current; }
	EOF;

// Rule Instruction
ruleInstruction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getInstructionAccess().getDBParserRuleCall_0());
		}
		this_DB_0=ruleDB
		{
			$current = $this_DB_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getInstructionAccess().getBase64ParserRuleCall_1());
		}
		this_Base64_1=ruleBase64
		{
			$current = $this_Base64_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getInstructionAccess().getORGParserRuleCall_2());
		}
		this_ORG_2=ruleORG
		{
			$current = $this_ORG_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getInstructionAccess().getINCLUDEParserRuleCall_3());
		}
		this_INCLUDE_3=ruleINCLUDE
		{
			$current = $this_INCLUDE_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getInstructionAccess().getMACParserRuleCall_4());
		}
		this_MAC_4=ruleMAC
		{
			$current = $this_MAC_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getInstructionAccess().getIPParserRuleCall_5());
		}
		this_IP_5=ruleIP
		{
			$current = $this_IP_5.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getInstructionAccess().getHXSParserRuleCall_6());
		}
		this_HXS_6=ruleHXS
		{
			$current = $this_HXS_6.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getInstructionAccess().getBEAction_7_0(),
						$current);
				}
			)
			{
				newCompositeNode(grammarAccess.getInstructionAccess().getBEParserRuleCall_7_1());
			}
			ruleBE
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getInstructionAccess().getLEAction_8_0(),
						$current);
				}
			)
			{
				newCompositeNode(grammarAccess.getInstructionAccess().getLEParserRuleCall_8_1());
			}
			ruleLE
			{
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleDB
entryRuleDB returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDBRule()); }
	iv_ruleDB=ruleDB
	{ $current=$iv_ruleDB.current; }
	EOF;

// Rule DB
ruleDB returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='DB'
		{
			newLeafNode(otherlv_0, grammarAccess.getDBAccess().getDBKeyword_0());
		}
		(
			(
				lv_value_1_0=RULE_BYTE
				{
					newLeafNode(lv_value_1_0, grammarAccess.getDBAccess().getValueBYTETerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDBRule());
					}
					setWithLastConsumed(
						$current,
						"value",
						lv_value_1_0,
						"a2b.A2B.BYTE");
				}
			)
		)
	)
;

// Entry rule entryRuleBase64
entryRuleBase64 returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBase64Rule()); }
	iv_ruleBase64=ruleBase64
	{ $current=$iv_ruleBase64.current; }
	EOF;

// Rule Base64
ruleBase64 returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='B64'
		{
			newLeafNode(otherlv_0, grammarAccess.getBase64Access().getB64Keyword_0());
		}
		(
			(
				lv_value_1_0=RULE_STRING
				{
					newLeafNode(lv_value_1_0, grammarAccess.getBase64Access().getValueSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBase64Rule());
					}
					setWithLastConsumed(
						$current,
						"value",
						lv_value_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleORG
entryRuleORG returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getORGRule()); }
	iv_ruleORG=ruleORG
	{ $current=$iv_ruleORG.current; }
	EOF;

// Rule ORG
ruleORG returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='ORG'
		{
			newLeafNode(otherlv_0, grammarAccess.getORGAccess().getORGKeyword_0());
		}
		(
			(
				lv_value_1_0=RULE_INT
				{
					newLeafNode(lv_value_1_0, grammarAccess.getORGAccess().getValueINTTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getORGRule());
					}
					setWithLastConsumed(
						$current,
						"value",
						lv_value_1_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
	)
;

// Entry rule entryRuleINCLUDE
entryRuleINCLUDE returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getINCLUDERule()); }
	iv_ruleINCLUDE=ruleINCLUDE
	{ $current=$iv_ruleINCLUDE.current; }
	EOF;

// Rule INCLUDE
ruleINCLUDE returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='INCLUDE'
		{
			newLeafNode(otherlv_0, grammarAccess.getINCLUDEAccess().getINCLUDEKeyword_0());
		}
		(
			(
				lv_value_1_0=RULE_PATH
				{
					newLeafNode(lv_value_1_0, grammarAccess.getINCLUDEAccess().getValuePATHTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getINCLUDERule());
					}
					setWithLastConsumed(
						$current,
						"value",
						lv_value_1_0,
						"a2b.A2B.PATH");
				}
			)
		)
	)
;

// Entry rule entryRuleMAC
entryRuleMAC returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMACRule()); }
	iv_ruleMAC=ruleMAC
	{ $current=$iv_ruleMAC.current; }
	EOF;

// Rule MAC
ruleMAC returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='MAC'
		{
			newLeafNode(otherlv_0, grammarAccess.getMACAccess().getMACKeyword_0());
		}
		(
			(
				lv_value_1_0=RULE_MACADDRESS
				{
					newLeafNode(lv_value_1_0, grammarAccess.getMACAccess().getValueMACADDRESSTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMACRule());
					}
					setWithLastConsumed(
						$current,
						"value",
						lv_value_1_0,
						"a2b.A2B.MACADDRESS");
				}
			)
		)
	)
;

// Entry rule entryRuleIP
entryRuleIP returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIPRule()); }
	iv_ruleIP=ruleIP
	{ $current=$iv_ruleIP.current; }
	EOF;

// Rule IP
ruleIP returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='IP'
		{
			newLeafNode(otherlv_0, grammarAccess.getIPAccess().getIPKeyword_0());
		}
		(
			(
				lv_value_1_0=RULE_IPADDRESS
				{
					newLeafNode(lv_value_1_0, grammarAccess.getIPAccess().getValueIPADDRESSTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getIPRule());
					}
					setWithLastConsumed(
						$current,
						"value",
						lv_value_1_0,
						"a2b.A2B.IPADDRESS");
				}
			)
		)
	)
;

// Entry rule entryRuleHXS
entryRuleHXS returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getHXSRule()); }
	iv_ruleHXS=ruleHXS
	{ $current=$iv_ruleHXS.current; }
	EOF;

// Rule HXS
ruleHXS returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='HXS'
		{
			newLeafNode(otherlv_0, grammarAccess.getHXSAccess().getHXSKeyword_0());
		}
		(
			(
				lv_value_1_0=RULE_HEXSTRING
				{
					newLeafNode(lv_value_1_0, grammarAccess.getHXSAccess().getValueHEXSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getHXSRule());
					}
					setWithLastConsumed(
						$current,
						"value",
						lv_value_1_0,
						"a2b.A2B.HEXSTRING");
				}
			)
		)
	)
;

// Entry rule entryRuleBE
entryRuleBE returns [String current=null]:
	{ newCompositeNode(grammarAccess.getBERule()); }
	iv_ruleBE=ruleBE
	{ $current=$iv_ruleBE.current.getText(); }
	EOF;

// Rule BE
ruleBE returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='BE'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getBEAccess().getBEKeyword());
	}
;

// Entry rule entryRuleLE
entryRuleLE returns [String current=null]:
	{ newCompositeNode(grammarAccess.getLERule()); }
	iv_ruleLE=ruleLE
	{ $current=$iv_ruleLE.current.getText(); }
	EOF;

// Rule LE
ruleLE returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='LE'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getLEAccess().getLEKeyword());
	}
;

RULE_BYTE : ('0B' ('0'..'9'|'1'..'9' '0'..'9'|'1' '0'..'9' '0'..'9'|'2' '0'..'4' '0'..'9'|'2' '5' '0'..'5')|'0b' ('0'|'1') ('0'|'1') ('0'|'1') ('0'|'1') ('0'|'1') ('0'|'1') ('0'|'1') ('0'|'1')|'0x' ('0'..'9'|'a'..'f') ('0'..'9'|'a'..'f'));

RULE_PATH : ('A'..'Z' ':')? ('/' ('a'..'z'|'A'..'Z')*)+ ('.' ('a'..'z'|'A'..'Z')*)+;

RULE_MACADDRESS : ('0'..'9'|'a'..'f') ('0'..'9'|'a'..'f') ':' ('0'..'9'|'a'..'f') ('0'..'9'|'a'..'f') ':' ('0'..'9'|'a'..'f') ('0'..'9'|'a'..'f') ':' ('0'..'9'|'a'..'f') ('0'..'9'|'a'..'f') ':' ('0'..'9'|'a'..'f') ('0'..'9'|'a'..'f') ':' ('0'..'9'|'a'..'f') ('0'..'9'|'a'..'f');

RULE_IPADDRESS : (('1'..'9')? '0'..'9'|'1' '0'..'9' '0'..'9'|'2' '0'..'4' '0'..'9'|'2' '5' '0'..'5') '.' (('1'..'9')? '0'..'9'|'1' '0'..'9' '0'..'9'|'2' '0'..'4' '0'..'9'|'2' '5' '0'..'5') '.' (('1'..'9')? '0'..'9'|'1' '0'..'9' '0'..'9'|'2' '0'..'4' '0'..'9'|'2' '5' '0'..'5') '.' (('1'..'9')? '0'..'9'|'1' '0'..'9' '0'..'9'|'2' '0'..'4' '0'..'9'|'2' '5' '0'..'5');

RULE_HEXSTRING : '0h' (('0'..'9'|'a'..'f') ('0'..'9'|'a'..'f'))+;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
